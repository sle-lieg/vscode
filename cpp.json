{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"hpp files": {
		"prefix": "ifn",
		"body": [
			"#ifndef ${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/}}_HPP",
			"# define ${1}_HPP",
			"",
			"",
			"#endif"
		],
		"description": "hpp header"
	},
	"class coplien": {
		"prefix": "class",
		"body": [
			"#include <iostream>",
			"#include \"\"",
			"",
			"class ${TM_FILENAME_BASE}",
			"{",
			"	public:",
			"		${TM_FILENAME_BASE}( void );",
			"		~${TM_FILENAME_BASE}( void );",
			"		${TM_FILENAME_BASE}(${TM_FILENAME_BASE} const &);",
			"		${TM_FILENAME_BASE}&	operator=(${TM_FILENAME_BASE} const &);",
			"",
			"	private:",
			"",
			"};"
		]
	},
	"makefile": {
		"prefix": "mak",
		"body": [
			"EXEC	=",
			"CC		=",
			"CCFLAGS	= -Wall -Wextra -Werror",
			"#LDFLAG =",
			"",
			"############ DIRECTORIES ############",
			"SOURCES_D	= sources/",
			"HEADERS_D	= headers/",
			"INCLUDES_D	= includes/",
			"OBJECTS_D	= objects/",
			"DEP_D		= dep/",
			"",
			"############### INCLUDES ############",
			"INCLUDES	= -I$(INCLUDES_D) -I$(HEADERS_D)",
			"",
			"############## SOURCES ##############",
			"SOURCES_F	= main.cpp",
			"# CLASSES_F	=",
			"",
			"############## OBJECTS ##############",
			"OBJECTS	= $(SOURCES_F:%.cpp=%.o)",
			"OBJECTS	:= $(OBJECTS) $(CLASSES_F:%.cpp=%.o)",
			"",
			"DEPENDENCIES = $(OBJECTS:%.o=$(DEP_D)%.d)",
			"",
			"all: createDir $(EXEC)",
			"",
			"createDir:",
			"	@test -d $(OBJECTS_D) || mkdir $(OBJECTS_D)",
			"	@test -d $(DEP_D) || mkdir $(DEP_D)",
			"",
			"-include $(DEPENDENCIES)",
			"",
			"# build executable from .o files",
			"$(EXEC): $(OBJECTS)",
			"	$(CC) $(addprefix $(OBJECTS_D), $^) -o $@",
			"",
			"# create FILE.o files referenced in $(OBJECTS) variable, from corresponding",
			"# FILE.cpp files present in the $(SOURCE_D) directory",
			"%.o: $(SOURCES_D)%.cpp",
			"	$(CC) $(FLAGS) -MMD -MF $(DEP_D)$(@F:%.o=%.d) -c $< -o $(OBJECTS_D)$@ $(INCLUDES)",
			"",
			"# %.o: $(CLASSES_D)%.cpp",
			"# 	$(CC) $(FLAGS) -MMD -MF $(DEP_D)$(@F:%.o=%.d) -c $< -o $(OBJECTS_D)$@ $(INCLUDES)",
			"",
			"clean:",
			"	rm -f $(OBJECTS)",
			"	rm -f $(DEPENDENCIES)",
			"",
			"fclean: clean",
			"	rm -f $(EXEC)",
			"",
			"re: fclean clean all",
		],
		"description": "hpp header",
	}
}
